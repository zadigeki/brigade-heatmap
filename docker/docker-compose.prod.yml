version: '3.8'

services:
  heatmap-web:
    build:
      context: .
      dockerfile: Dockerfile
    image: brigade-heatmap:latest
    container_name: brigade-heatmap-web-prod
    ports:
      - "5000:5000"
    environment:
      - BRIGADE_API_URL=${BRIGADE_API_URL:-http://host.docker.internal:12056}
      - BRIGADE_USERNAME=${BRIGADE_USERNAME:-admin}
      - BRIGADE_PASSWORD=${BRIGADE_PASSWORD:-admin}
      - DATABASE_PATH=/app/data/devices.db
      - UPDATE_INTERVAL_MINUTES=${UPDATE_INTERVAL_MINUTES:-10}
      - ALARM_UPDATE_INTERVAL_MINUTES=${ALARM_UPDATE_INTERVAL_MINUTES:-5}
      - ALARM_LOOKBACK_MINUTES=${ALARM_LOOKBACK_MINUTES:-10}
      - ALARM_BATCH_SIZE=${ALARM_BATCH_SIZE:-50}
      - ALARM_CLEANUP_DAYS=${ALARM_CLEANUP_DAYS:-30}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - heatmap-data:/app/data
      - heatmap-logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - heatmap-network

  heatmap-sync:
    build:
      context: .
      dockerfile: Dockerfile  
    image: brigade-heatmap:latest
    container_name: brigade-heatmap-sync-prod
    command: ["python", "main.py", "--command", "start"]
    environment:
      - BRIGADE_API_URL=${BRIGADE_API_URL:-http://host.docker.internal:12056}
      - BRIGADE_USERNAME=${BRIGADE_USERNAME:-admin}
      - BRIGADE_PASSWORD=${BRIGADE_PASSWORD:-admin}
      - DATABASE_PATH=/app/data/devices.db
      - UPDATE_INTERVAL_MINUTES=${UPDATE_INTERVAL_MINUTES:-10}
      - ALARM_UPDATE_INTERVAL_MINUTES=${ALARM_UPDATE_INTERVAL_MINUTES:-5}
      - ALARM_LOOKBACK_MINUTES=${ALARM_LOOKBACK_MINUTES:-10}
      - ALARM_BATCH_SIZE=${ALARM_BATCH_SIZE:-50}
      - ALARM_CLEANUP_DAYS=${ALARM_CLEANUP_DAYS:-30}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - heatmap-data:/app/data
      - heatmap-logs:/app/logs
    restart: unless-stopped
    depends_on:
      heatmap-web:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - heatmap-network

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: brigade-heatmap-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - heatmap-web
    restart: unless-stopped
    networks:
      - heatmap-network
    profiles:
      - with-proxy

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: brigade-heatmap-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - heatmap-network
    profiles:
      - with-monitoring

volumes:
  heatmap-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  heatmap-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  prometheus-data:
    driver: local

networks:
  heatmap-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16